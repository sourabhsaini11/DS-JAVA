import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;
class Node {
	int key;
	Node left, right;

	public Node(int key) {
		this.key = key;
		left = right = null;
	}
}

class Main
{

	public static void inorderTraversal(Node root) {
		if (root == null) {
			return;
		}

		inorderTraversal(root.left);
		System.out.print(root.key + " ");
		inorderTraversal(root.right);
	}

	public static void preorderTraversal(Node root) {
		if (root == null) {
			return;
		}

		System.out.print(root.key + " ");
		preorderTraversal(root.left);
		preorderTraversal(root.right);
	}


	public static Node construct(int start, int end,
								 int[] preorder, AtomicInteger pIndex,
								 Map<Integer, Integer> map) {
		
		if (start > end) {
			return null;
		}

		
		Node root = new Node(preorder[pIndex.getAndIncrement()]);

	
		int index = map.get(root.key);

		root.left = construct(start, index - 1, preorder, pIndex, map);

		root.right = construct(index + 1, end, preorder, pIndex, map);

		return root;
	}


	public static Node construct(int[] inorder, int[] preorder)
	{
		
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < inorder.length; i++) {
			map.put(inorder[i], i);
		}

	
		AtomicInteger pIndex = new AtomicInteger(0);

		return construct(0, inorder.length - 1, preorder, pIndex, map);
	}

	public static void main(String[] args) {
	
		int[] inorder = { 4, 2, 1, 7, 5, 8, 3, 6 };
		int[] preorder = { 1, 2, 4, 3, 5, 7, 8, 6 };

		Node root = construct(inorder, preorder);

		// traverse the constructed tree
		System.out.print("Inorder  : ");
		inorderTraversal(root);

		System.out.print("\nPreorder : ");
		preorderTraversal(root);
	}
}
